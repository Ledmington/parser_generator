plugins {
    id 'application'
}

// utility function
static def path(final String ...s) {
    return String.join(File.separator, s)
}

String cliVersion = "0.1.0"
String fatJarBaseName = "${appNameLowerCase}-cli-${cliVersion}"
String fatJarName = "${fatJarBaseName}.jar"
String fatJarPath = path("${project.layout.buildDirectory.get().toString()}", "libs", "${fatJarName}")
String mainClassName = "${basePackage}.cli.Main"

dependencies {
    implementation project(':ebnf')
    implementation project(':generator')
}

application {
    mainClass = mainClassName
}

run {
    args = []
    jvmArgs = []
}

tasks.register('fatJar', Jar) {
    group = 'distribution'
    description = 'Builds the fat jar of the application'
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        archiveBaseName = appNameLowerCase
        attributes(
                "Implementation-Version": "${cliVersion}",
                "Main-Class": "$mainClassName"
        )
    }
    archiveBaseName = "${fatJarBaseName}"

    doLast {
        printf "The fat jar is %s\n", fatJarPath
        printf "Fat jar size: %.3f MB\n", new File(fatJarPath).length() / 1_000_000L
    }
}

tasks.register('integrationTest', Exec) {
    group = 'verification'
    description = 'Runs the integration tests using the fat JAR and a bash script.'
    dependsOn fatJar
    commandLine path("${rootProject.projectDir}", "integration", "run_tests.sh"), fatJarPath
    standardOutput = System.out
    errorOutput = System.err
    ignoreExitValue = false
}

tasks.test.dependsOn(integrationTest)
tasks.build.dependsOn(fatJar)
tasks.javadoc.enabled = false
