plugins {
    id 'application'
}

// utility function
static def path(final String ...s) {
    return String.join(File.separator, s)
}

static def getDate() {
    return new Date().format('yyyyMMddHHmmss')
}

String fatJarBaseName = "${appNameLowerCase}-benchmark"
String fatJarName = "${fatJarBaseName}.jar"
String fatJarPath = path("${project.layout.buildDirectory.get().toString()}", "libs", "${fatJarName}")
String mainClassName = "${basePackage}.bench.Main"

dependencies {
    implementation project(':ebnf')
    implementation project(':generator')
}

application {
    mainClass = mainClassName
}

run {
    args = []
    jvmArgs = []
}

tasks.register('fatJar', Jar) {
    group = 'distribution'
    description = 'Builds the fat jar of the application'
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        archiveBaseName = appNameLowerCase
        attributes(
                "Main-Class": "$mainClassName"
        )
    }
    archiveBaseName = "${fatJarBaseName}"

    doLast {
        printf "The fat jar is %s\n", fatJarPath
        printf "Fat jar size: %.3f MB\n", new File(fatJarPath).length() / 1_000_000L
    }
}

tasks.build.dependsOn(fatJar)
tasks.javadoc.enabled = false

def asyncProfilerVersion = "2.9"

if (System.getProperty("os.name").toLowerCase().contains("windows")) {
    println("Sorry, no support for async-profiler on Windows at the moment. The tasks 'downloadAsyncProfiler', 'asyncProfiler' and 'flamegraph' will not be generated.")
    println("Check this for news: https://github.com/async-profiler/async-profiler/issues/188")
} else {
    tasks.register('downloadAsyncProfiler', Download) {
        group 'utilities'
        description 'Downloads async-profiler'
        src "https://github.com/async-profiler/async-profiler/releases/download/v${asyncProfilerVersion}/async-profiler-${asyncProfilerVersion}-linux-x64.tar.gz"
        dest new File("${project.layout.buildDirectory.get().toString()}", "async-profiler.tar.gz")
        overwrite false
    }

    tasks.register('asyncProfiler', Copy) {
        dependsOn downloadAsyncProfiler
        group 'utilities'
        description 'Prepares async-profiler into the build directory'
        from tarTree(downloadAsyncProfiler.dest)
        into path("${project.layout.buildDirectory.get().toString()}", "async-profiler")
        includeEmptyDirs(false)
        ext {
            profiler = path("${project.layout.buildDirectory.get().toString()}", "async-profiler", "async-profiler-${asyncProfilerVersion}-linux-x64", "build", "libasyncProfiler.so")
        }
    }

    tasks.register('flamegraph', JavaExec) {
        dependsOn([asyncProfiler, fatJar])
        group 'utilities'
        description 'Runs the app with async-profiler attached and generates a flamegraph'
        String flamegraphFile = path("${project.layout.buildDirectory.get().toString()}", "flamegraphs", "flamegraph-cpu-${getDate()}.html")
        doFirst {
            mkdir path("${project.layout.buildDirectory.get().toString()}", "flamegraphs")
        }
        classpath fatJarPath
        args = []
        jvmArgs = [
                "-agentpath:${asyncProfiler.profiler}=start,event=cpu,file=${flamegraphFile}"
        ]
        doLast {
            if(new File(flamegraphFile).exists()) {
                println "\n"
                println "Generated flamegraph ${flamegraphFile}"
            } else {
                println "\n"
                println "It seems that a flamegraph has not been generated. Have you checked your perf_event_paranoid?"
            }
        }
    }
}
