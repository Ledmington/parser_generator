/*
 * parser-gen - Parser Generator
 * Copyright (C) 2025-2025 Filippo Barbari <filippo.barbari@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.ledmington.generator;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Queue;
import java.util.Set;
import java.util.stream.Collectors;

import com.ledmington.ebnf.Expression;
import com.ledmington.ebnf.Grammar;
import com.ledmington.ebnf.Node;
import com.ledmington.ebnf.NonTerminal;
import com.ledmington.ebnf.OneOrMore;
import com.ledmington.ebnf.Or;
import com.ledmington.ebnf.Production;
import com.ledmington.ebnf.Sequence;
import com.ledmington.ebnf.Terminal;
import com.ledmington.ebnf.Utils;
import com.ledmington.ebnf.ZeroOrMore;
import com.ledmington.ebnf.ZeroOrOne;
import com.ledmington.generator.automata.AcceptingState;
import com.ledmington.generator.automata.AutomataUtils;
import com.ledmington.generator.automata.DFA;
import com.ledmington.generator.automata.NFA;
import com.ledmington.generator.automata.State;

/** Generates Java code to parse a specified EBNF grammar. */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public final class Generator {

	private static final Map<Node, String> NODE_NAMES = new HashMap<>();

	private Generator() {}

	/**
	 * Generates a String containing Java source code to parse the given EBNF grammar.
	 *
	 * @param g The EBNF grammar to convert.
	 * @param parserName The name of the parser class produced.
	 * @param packageName The name of the package to output.
	 * @param indent The level of indentation to use when generating source code.
	 * @param generateMainMethod True to generate a self-contained executable parser which prints the resulting match.
	 * @return The indented Java source code of the parser of the given EBNF grammar.
	 */
	public static String generate(
			final Grammar g,
			final String parserName,
			final String packageName,
			final String indent,
			final boolean generateMainMethod) {
		NODE_NAMES.clear();

		final String startSymbol = GrammarChecker.check(g);

		final Map<NonTerminal, Expression> productions = g.productions();
		final NonTerminal start = productions.keySet().stream()
				.filter(x -> x.name().equals(startSymbol))
				.findFirst()
				.orElseThrow();
		if (Production.isLexerProduction(start.name())) {
			final Expression expr = productions.get(start);
			productions.remove(start);
			final NonTerminal tmp = new NonTerminal("NEW_" + startSymbol);
			final NonTerminal newStart = new NonTerminal(startSymbol.toLowerCase(Locale.US));
			productions.put(newStart, tmp);
			productions.put(tmp, expr);
		}

		final List<Production> lexerProductions = new ArrayList<>();
		final List<Production> parserProductions = new ArrayList<>();
		GrammarUtils.splitProductions(productions, lexerProductions, parserProductions);

		generateNames(parserProductions);

		final boolean atLeastOneSequence = NODE_NAMES.keySet().stream().anyMatch(n -> n instanceof Sequence);
		final boolean atLeastOneZeroOrOne = NODE_NAMES.keySet().stream().anyMatch(n -> n instanceof ZeroOrOne);
		final boolean atLeastOneZeroOrMore = NODE_NAMES.keySet().stream().anyMatch(n -> n instanceof ZeroOrMore);
		final boolean atLeastOneOneOrMore = NODE_NAMES.keySet().stream().anyMatch(n -> n instanceof OneOrMore);
		final boolean atLeastOneOr = NODE_NAMES.keySet().stream().anyMatch(n -> n instanceof Or);

		final IndentedStringBuilder sb = new IndentedStringBuilder(indent);
		sb.append("/*\n")
				.append(" * This file has been generated by the parser generator. Do not edit.\n")
				.append(" */\n");
		if (packageName != null && !packageName.isBlank()) {
			sb.append("package ").append(packageName).append(";\n\n");
		}
		sb.append("import java.util.List;\n").append("import java.util.ArrayList;\n");
		if (atLeastOneSequence || generateMainMethod) {
			sb.append("import java.util.Stack;\n");
		}
		sb.append("import java.util.Map;\n")
				.append("import java.util.Objects;\n")
				.append("import java.util.Arrays;\n")
				.append("import java.util.function.Function;\n");
		if (generateMainMethod) {
			sb.append("import java.util.Collections;\n")
					.append("import java.io.IOException;\n")
					.append("import java.nio.file.Files;\n")
					.append("import java.nio.file.Path;\n");
		}
		if (atLeastOneSequence || atLeastOneZeroOrMore || generateMainMethod) {
			sb.append('\n');
		}
		sb.append("public final class ")
				.append(parserName)
				.append(" {\n")
				.indent()
				.append("private Token[] v = null;\n")
				.append("private int pos = 0;\n");
		if (atLeastOneSequence) {
			sb.append("private final Stack<Integer> stack = new Stack<>();\n");
		}
		sb.append("public interface Node {}\n").append("public record Terminal(String literal) implements Node {}\n");
		if (atLeastOneZeroOrOne) {
			sb.append("public record ZeroOrOne(Node inner) implements Node {}\n");
		}
		if (atLeastOneSequence) {
			sb.append("public record Sequence(List<Node> nodes) implements Node {}\n");
		}
		if (atLeastOneZeroOrMore) {
			sb.append("public record ZeroOrMore(List<Node> nodes) implements Node {}\n");
		}
		if (atLeastOneOneOrMore) {
			sb.append("public record OneOrMore(List<Node> nodes) implements Node {}\n");
		}
		if (atLeastOneOr) {
			sb.append("public record Or(Node inner) implements Node {}\n");
		}

		final String lexerName = parserName + "_Lexer";

		generateLexer(sb, lexerName, lexerProductions);

		sb.append("public Node parse(final String input) {\n").indent().append("final Node result;\n");

		sb.append("final ")
				.append(lexerName)
				.append(" lexer = new ")
				.append(lexerName)
				.append("();\n")
				.append("try {\n")
				.indent()
				.append("this.v = lexer.tokenize(input).toArray(new Token[0]);\n")
				.deindent()
				.append("} catch (final IllegalArgumentException e) {\n")
				.indent()
				.append("return null;\n")
				.deindent()
				.append("}\n")
				.append("this.pos = 0;\n")
				.append("try {\n")
				.indent();

		if (lexerProductions.stream().anyMatch(p -> p.start().name().equals(startSymbol))) {
			sb.append("result = parseTerminal(TokenType." + startSymbol + ");\n");
		} else {
			sb.append("result = parse_" + startSymbol + "();\n");
		}

		sb.deindent()
				.append("} catch (final ArrayIndexOutOfBoundsException e) {\n")
				.indent()
				.append("return null;\n")
				.deindent()
				.append("}\n");
		if (atLeastOneSequence) {
			sb.append("return (pos == v.length && stack.isEmpty()) ? result : null;\n");
		} else {
			sb.append("return pos == v.length ? result : null;\n");
		}
		sb.deindent().append("}\n");

		final Set<String> tokenNames =
				lexerProductions.stream().map(p -> p.start().name()).collect(Collectors.toUnmodifiableSet());

		final Queue<Node> q = new ArrayDeque<>();
		final Set<Node> visited = new HashSet<>();

		for (final Production p : parserProductions) {
			generateNonTerminal(q, sb, p.start(), p.result(), tokenNames);
		}

		while (!q.isEmpty()) {
			final Node n = q.remove();
			if (visited.contains(n)) {
				continue;
			}
			visited.add(n);
			switch (n) {
				case NonTerminal ignored -> {
					// No need to generate anything here because we already handle non-terminals when visiting
					// the grammar's productions
				}
				case Sequence s -> generateSequence(q, sb, NODE_NAMES.get(s), s, tokenNames);
				case ZeroOrOne zoo -> generateZeroOrOne(q, sb, NODE_NAMES.get(zoo), zoo, tokenNames);
				case ZeroOrMore zom -> generateZeroOrMore(q, sb, NODE_NAMES.get(zom), zom, tokenNames);
				case OneOrMore oom -> generateOneOrMore(q, sb, NODE_NAMES.get(oom), oom, tokenNames);
				case Or or -> generateOr(q, sb, NODE_NAMES.get(or), or, tokenNames);
				default -> throw new IllegalArgumentException(String.format("Unknown node '%s'.", n));
			}
		}

		sb.append("private Terminal parseTerminal(final TokenType expected) {\n")
				.indent()
				.append("if (pos < v.length && v[pos].type() == expected) {\n")
				.indent()
				.append("return new Terminal(v[pos++].content());\n")
				.deindent()
				.append("}\n")
				.append("return null;\n")
				.deindent()
				.append("}\n");

		if (generateMainMethod) {
			sb.append(
							"private static void printNode(final Node n, final String indent, final String continuationIndent) {\n")
					.indent()
					.append("final char verticalLine = '│';\n")
					.append("final char horizontalLine = '─';\n")
					.append("final char joint = '├';\n")
					.append("final char angle = '└';\n")
					.append("switch (n) {\n")
					.indent()
					.append("case Terminal t -> System.out.println(indent + t);\n");
			if (atLeastOneOr) {
				sb.append("case Or or -> {\n")
						.indent()
						.append("System.out.println(indent + \"Or\");\n")
						.append(
								"printNode(or.inner(), continuationIndent + \" \" + angle + horizontalLine, continuationIndent + \"   \");\n")
						.deindent()
						.append("}\n");
			}
			if (atLeastOneSequence) {
				sb.append("case Sequence s -> {\n")
						.indent()
						.append("System.out.println(indent + \"Sequence\");\n")
						.append("final List<Node> children = s.nodes();\n")
						.append("final int len = children.size();\n")
						.append("for (int i = 0; i < len - 1; i++) {\n")
						.indent()
						.append(
								"printNode(children.get(i), continuationIndent + \" \" + joint + horizontalLine, continuationIndent + ' ' + verticalLine + ' ');\n")
						.deindent()
						.append("}\n")
						.append(
								"printNode(children.getLast(), continuationIndent + \" \" + angle + horizontalLine, continuationIndent + \"   \");\n")
						.deindent()
						.append("}\n");
			}
			if (atLeastOneZeroOrMore) {
				sb.append("case ZeroOrMore zom -> {\n")
						.indent()
						.append("System.out.println(indent + \"ZeroOrMore\");\n")
						.append("final List<Node> children = zom.nodes();\n")
						.append("final int len = children.size();\n")
						.append("for (int i = 0; i < len - 1; i++) {\n")
						.indent()
						.append(
								"printNode(children.get(i), continuationIndent + \" \" + joint + horizontalLine, continuationIndent + ' ' + verticalLine + ' ');\n")
						.deindent()
						.append("}\n")
						.append(
								"printNode(len == 0 ? null : children.getLast(), continuationIndent + \" \" + angle + horizontalLine, continuationIndent + \"   \");\n")
						.deindent()
						.append("}\n");
			}
			if (atLeastOneOneOrMore) {
				sb.append("case OneOrMore oom -> {\n")
						.indent()
						.append("System.out.println(indent + \"OneOrMore\");\n")
						.append("final List<Node> children = oom.nodes();\n")
						.append("final int len = children.size();\n")
						.append("for (int i = 0; i < len - 1; i++) {\n")
						.indent()
						.append(
								"printNode(children.get(i), continuationIndent + \" \" + joint + horizontalLine, continuationIndent + ' ' + verticalLine + ' ');\n")
						.deindent()
						.append("}\n")
						.append(
								"printNode(children.getLast(), continuationIndent + \" \" + angle + horizontalLine, continuationIndent + \"   \");\n")
						.deindent()
						.append("}\n");
			}
			if (atLeastOneZeroOrOne) {
				sb.append("case ZeroOrOne zoo -> {\n")
						.indent()
						.append("System.out.println(indent + \"ZeroOrOne\");\n")
						.append(
								"printNode(zoo.inner(), continuationIndent + \" \" + angle + horizontalLine, continuationIndent + \"   \");\n")
						.deindent()
						.append("}\n");
			}
			sb.append("case null -> System.out.println(indent + \"null\");\n")
					.append(
							"default -> throw new IllegalArgumentException(String.format(\"Unknown node: '%s'.\", n));\n")
					.deindent()
					.append("}\n")
					.deindent()
					.append("}\n");

			sb.append("public static void main(final String[] args) {\n")
					.indent()
					.append("if (args.length != 1) {\n")
					.indent()
					.append("throw new RuntimeException(\"Expected the file to read input from.\");\n")
					.deindent()
					.append("}\n")
					.append("final ")
					.append(parserName)
					.append(" parser = new ")
					.append(parserName)
					.append("();\n")
					.append("final Node result;\n")
					.append("try {\n")
					.indent()
					.append("result = parser.parse(Files.readString(Path.of(args[0])));\n")
					.deindent()
					.append("} catch (final IOException e) {\n")
					.indent()
					.append("throw new RuntimeException(e);\n")
					.deindent()
					.append("}\n")
					.append("printNode(result, \"\", \"\");\n")
					.deindent()
					.append("}\n");
		}

		return sb.deindent().append("}").toString();
	}

	private static void generateLexer(
			final IndentedStringBuilder sb, final String lexerName, final List<Production> lexerProductions) {
		final NFA epsilonNFA = AutomataUtils.grammarToEpsilonNFA(lexerProductions);
		AutomataUtils.assertEpsilonNFAValid(epsilonNFA);
		final NFA nfa = AutomataUtils.epsilonNFAtoNFA(epsilonNFA);
		AutomataUtils.assertNFAValid(nfa);
		final DFA dfa = AutomataUtils.NFAtoDFA(nfa);
		AutomataUtils.assertDFAValid(dfa);
		final DFA minimizedDFA = AutomataUtils.minimizeDFA(dfa);
		AutomataUtils.assertDFAValid(minimizedDFA);

		// re-index DFA states
		final Map<State, Integer> stateIndex = new HashMap<>();
		stateIndex.put(minimizedDFA.startingState(), 0);
		int idx = 1;
		for (final State s : minimizedDFA.states()) {
			if (s.equals(minimizedDFA.startingState())) {
				continue;
			}
			stateIndex.put(s, idx);
			idx++;
		}

		final List<State> allStates = stateIndex.entrySet().stream()
				.sorted(Entry.comparingByValue())
				.map(Entry::getKey)
				.toList();

		sb.append("public enum TokenType {\n")
				.indent()
				.append(lexerProductions.stream()
						.map(p -> p.start().name())
						.sorted()
						.collect(Collectors.joining(",\n")))
				.append('\n')
				.deindent()
				.append("}\n");
		sb.append("public record Token(TokenType type, String content) {\n")
				.indent()
				.append("public Token {\n")
				.indent()
				.append("Objects.requireNonNull(type);\n")
				.append("Objects.requireNonNull(content);\n")
				.deindent()
				.append("}\n")
				.deindent()
				.append("}\n");

		sb.append("public static final class ").append(lexerName).append(" {\n").indent();

		final int maxPerRow = 10;
		sb.append("private final boolean[] isAccepting = new boolean[] {\n").indent();
		for (int i = 0; i < allStates.size(); i++) {
			final State s = allStates.get(i);
			sb.append(s.isAccepting() ? "true" : "false");
			if (i < allStates.size() - 1) {
				sb.append(',');
				if (i % maxPerRow == maxPerRow - 1) {
					sb.append('\n');
				} else {
					sb.append(' ');
				}
			}
		}
		sb.deindent().append("\n};\n");
		sb.append("private final boolean[] isSkippable = new boolean[] {\n").indent();
		for (int i = 0; i < allStates.size(); i++) {
			final State s = allStates.get(i);
			sb.append((s.isAccepting() && Production.isSkippable(((AcceptingState) s).tokenName())) ? "true" : "false");
			if (i < allStates.size() - 1) {
				sb.append(',');
				if (i % maxPerRow == maxPerRow - 1) {
					sb.append('\n');
				} else {
					sb.append(' ');
				}
			}
		}
		sb.deindent().append("\n};\n");

		sb.append("private final List<Function<String, Token>> tokensToMatch = Arrays.asList(\n")
				.indent();
		for (int i = 0; i < allStates.size(); i++) {
			final State s = allStates.get(i);
			sb.append(
					s.isAccepting() ? "s -> new Token(TokenType." + ((AcceptingState) s).tokenName() + ", s)" : "null");
			if (i < allStates.size() - 1) {
				sb.append(',');
			}
			sb.append('\n');
		}
		sb.deindent().append(");\n");

		// TODO: change this into three arrays for better performance
		sb.append(
						"private final Map<Integer, Map<Character, Integer>> transitions = Map.<Integer, Map<Character, Integer>>ofEntries(\n")
				.indent();
		for (int i = 0; i < allStates.size(); i++) {
			final State src = allStates.get(i);
			sb.append("Map.entry(").append(i).append(", Map.<Character, Integer>ofEntries(");
			final Map<Character, State> neighbors = minimizedDFA.neighbors(src);
			if (neighbors != null) {
				final List<Map.Entry<Character, State>> entries = neighbors.entrySet().stream()
						.sorted(Map.Entry.comparingByKey())
						.toList();
				for (int j = 0; j < entries.size(); j++) {
					final char symbol = entries.get(j).getKey();
					final State dst = entries.get(j).getValue();
					sb.append('\n').indent();
					sb.append("Map.entry('")
							.append(Utils.getEscapedCharacter(symbol))
							.append("', ")
							.append(stateIndex.get(dst))
							.append(")");
					if (j < entries.size() - 1) {
						sb.append(',');
					}
					sb.deindent();
				}
			}
			sb.append("))");
			if (i < allStates.size() - 1) {
				sb.append(',');
			}
			sb.append('\n');
		}
		sb.deindent().append(");\n");

		sb.append("public ")
				.append(lexerName)
				.append("() {}\n")
				.append("public List<Token> tokenize(final String input) {\n")
				.indent()
				.append("final char[] v = input.toCharArray();\n")
				.append("int pos = 0;\n")
				.append("int lastTokenMatchStart = 0;\n")
				.append("int lastTokenMatchEnd = 0;\n")
				.append("final List<Token> tokens = new ArrayList<>();\n")
				.append("int currentState = 0;\n")
				.append("while (pos < v.length) {\n")
				.indent()
				.append("if (isAccepting[currentState]) {\n")
				.indent()
				.append("lastTokenMatchEnd = pos;\n")
				.deindent()
				.append("}\n")
				.append("final char ch = v[pos];\n")
				.append("if (transitions.get(currentState).containsKey(ch)) {\n")
				.indent()
				.append("currentState = transitions.get(currentState).get(ch);\n")
				.append("pos++;\n")
				.deindent()
				.append("} else {\n")
				.indent()
				.append("if (isAccepting[currentState]) {\n")
				.indent()
				.append("final int length = lastTokenMatchEnd - lastTokenMatchStart;\n")
				.append("if (length == 0) {\n")
				.indent()
				.append(
						"throw new IllegalArgumentException(String.format(\"No token emitted for empty match at index %,d.\", pos));\n")
				.deindent()
				.append("}\n")
				.append("if (!isSkippable[currentState]) {\n")
				.indent()
				.append("final String match = String.copyValueOf(v, lastTokenMatchStart, length);\n")
				.append("tokens.add(tokensToMatch.get(currentState).apply(match));\n")
				.deindent()
				.append("}\n")
				.append("lastTokenMatchStart = pos;\n")
				.append("lastTokenMatchEnd = -1;\n")
				.append("currentState = 0;\n")
				.deindent()
				.append("} else {\n")
				.indent()
				.append("throw new IllegalArgumentException(String.format(\"Lexical error at index %,d.\", pos));\n")
				.deindent()
				.append("}\n")
				.deindent()
				.append("}\n")
				.deindent()
				.append("}\n")
				.append("if (isAccepting[currentState]) {\n")
				.indent()
				.append("lastTokenMatchEnd = pos;\n")
				.deindent()
				.append("}\n")
				.append("final int length = lastTokenMatchEnd - lastTokenMatchStart;\n")
				.append("if (isAccepting[currentState] && length > 0 && !isSkippable[currentState]) {\n")
				.indent()
				.append("final String match = String.copyValueOf(v, lastTokenMatchStart, length);\n")
				.append("tokens.add(tokensToMatch.get(currentState).apply(match));\n")
				.deindent()
				.append("}\n")
				.append("return tokens;\n")
				.deindent()
				.append("}\n")
				.deindent()
				.append("}\n");
	}

	private static void generateOr(
			final Queue<Node> q,
			final IndentedStringBuilder sb,
			final String productionName,
			final Or a,
			final Set<String> tokenNames) {
		sb.append("private Or parse_" + productionName + "() {\n").indent();
		final List<Expression> nodes = a.nodes();
		for (int i = 0; i < nodes.size(); i++) {
			final Node n = nodes.get(i);
			final String nodeName = "n_" + i;
			final String actualName = NODE_NAMES.get(n);
			if (n instanceof NonTerminal && tokenNames.contains(actualName)) {
				sb.append("final Node " + nodeName + " = parseTerminal(TokenType." + actualName + ");\n");
			} else {
				sb.append("final Node " + nodeName + " = parse_" + actualName + "();\n");
				q.add(n);
			}
			sb.append("if (" + nodeName + " != null) {\n")
					.indent()
					.append("return new Or(" + nodeName + ");\n")
					.deindent()
					.append("}\n");
		}
		sb.append("return null;\n").deindent().append("}\n");
	}

	private static void generateZeroOrMore(
			final Queue<Node> q,
			final IndentedStringBuilder sb,
			final String productionName,
			final ZeroOrMore r,
			final Set<String> tokenNames) {
		sb.append("private ZeroOrMore parse_" + productionName + "() {\n")
				.indent()
				.append("final List<Node> nodes = new ArrayList<>();\n")
				.append("while (true) {\n")
				.indent();
		final String actualName = NODE_NAMES.get(r.inner());
		if (r.inner() instanceof NonTerminal && tokenNames.contains(actualName)) {
			sb.append("final Node n = parseTerminal(TokenType." + actualName + ");\n");
		} else {
			sb.append("final Node n = parse_" + actualName + "();\n");
			q.add(r.inner());
		}
		if (!(r.inner() instanceof ZeroOrMore)) {
			sb.append("if (n == null) {\n")
					.indent()
					.append("break;\n")
					.deindent()
					.append("}\n");
		}
		sb.append("nodes.add(n);\n")
				.deindent()
				.append("}\n")
				.append("return new ZeroOrMore(nodes);\n")
				.deindent()
				.append("}\n");
	}

	private static void generateOneOrMore(
			final Queue<Node> q,
			final IndentedStringBuilder sb,
			final String productionName,
			final OneOrMore oom,
			final Set<String> tokenNames) {
		final String actualName = NODE_NAMES.get(oom.inner());
		sb.append("private OneOrMore parse_" + productionName + "() {\n")
				.indent()
				.append("final List<Node> nodes = new ArrayList<>();\n");
		if (oom.inner() instanceof NonTerminal && tokenNames.contains(actualName)) {
			sb.append("final Node n_0 = parseTerminal(TokenType." + actualName + ");\n");
		} else {
			sb.append("final Node n_0 = parse_" + actualName + "();\n");
			q.add(oom.inner());
		}
		sb.append("nodes.add(n_0);\n");
		if (!(oom.inner() instanceof ZeroOrMore)) {
			sb.append("if (n_0 == null) {\n")
					.indent()
					.append("return null;\n")
					.deindent()
					.append("}\n");
		}
		sb.append("while (true) {\n").indent();
		if (oom.inner() instanceof NonTerminal && tokenNames.contains(actualName)) {
			sb.append("final Node n = parseTerminal(TokenType." + actualName + ");\n");
		} else {
			sb.append("final Node n = parse_" + actualName + "();\n");
			q.add(oom.inner());
		}
		if (!(oom.inner() instanceof ZeroOrMore)) {
			sb.append("if (n == null) {\n")
					.indent()
					.append("break;\n")
					.deindent()
					.append("}\n");
		}
		sb.append("nodes.add(n);\n")
				.deindent()
				.append("}\n")
				.append("return new OneOrMore(nodes);\n")
				.deindent()
				.append("}\n");
	}

	private static void generateSequence(
			final Queue<Node> q,
			final IndentedStringBuilder sb,
			final String productionName,
			final Sequence s,
			final Set<String> tokenNames) {
		sb.append("private Sequence parse_" + productionName + "() {\n")
				.indent()
				.append("final List<Node> nodes = new ArrayList<>();\n")
				.append("stack.push(this.pos);\n");

		final List<Expression> seq = s.nodes();
		for (int i = 0; i < seq.size(); i++) {
			final Node n = seq.get(i);
			final String nodeName = "n_" + i;
			final String actualName = NODE_NAMES.get(n);
			if (n instanceof NonTerminal && tokenNames.contains(actualName)) {
				sb.append("final Node " + nodeName + " = parseTerminal(TokenType." + actualName + ");\n");
			} else {
				sb.append("final Node " + nodeName + " = parse_" + actualName + "();\n");
				q.add(n);
			}
			if (!(n instanceof ZeroOrMore)) {
				sb.append("if (" + nodeName + " == null) {\n")
						.indent()
						.append("this.pos = stack.pop();\n")
						.append("return null;\n")
						.deindent()
						.append("}\n");
			}
			sb.append("nodes.add(" + nodeName + ");\n");
		}

		sb.append("stack.pop();\n")
				.append("return new Sequence(nodes);\n")
				.deindent()
				.append("}\n");
	}

	private static void generateNonTerminal(
			final Queue<Node> q,
			final IndentedStringBuilder sb,
			final NonTerminal start,
			final Expression result,
			final Set<String> tokenNames) {
		sb.append("private Node parse_")
				.append(NODE_NAMES.get(start))
				.append("() {\n")
				.indent();
		if (result instanceof NonTerminal(final String tokenName) && tokenNames.contains(tokenName)) {
			sb.append("return parseTerminal(TokenType." + tokenName + ");\n");
		} else {
			sb.append("return parse_" + NODE_NAMES.get(result) + "();\n");
			q.add(result);
		}
		sb.deindent().append("}\n");
	}

	private static void generateNames(final List<Production> parserProductions) {
		final Set<Node> visited = new HashSet<>();
		final Queue<Node> q = new ArrayDeque<>();

		for (final Production p : parserProductions) {
			q.add(p.start());
			q.add(p.result());
		}

		int zeroOrOneCounter = 0;
		int sequenceCounter = 0;
		int zeroOrMoreCounter = 0;
		int oneOrMoreCounter = 0;
		int alternationCounter = 0;
		while (!q.isEmpty()) {
			final Node n = q.remove();
			if (visited.contains(n)) {
				continue;
			}
			visited.add(n);
			switch (n) {
				case Terminal ignored -> {}
				case NonTerminal nt -> NODE_NAMES.put(nt, nt.name());
				case ZeroOrOne zoo -> {
					NODE_NAMES.put(zoo, "zero_or_one_" + zeroOrOneCounter);
					q.add(zoo.inner());
					zeroOrOneCounter++;
				}
				case ZeroOrMore zom -> {
					NODE_NAMES.put(zom, "zero_or_more_" + zeroOrMoreCounter);
					zeroOrMoreCounter++;
					q.add(zom.inner());
				}
				case OneOrMore oom -> {
					NODE_NAMES.put(oom, "one_or_more_" + oneOrMoreCounter);
					oneOrMoreCounter++;
					q.add(oom.inner());
				}
				case Sequence s -> {
					NODE_NAMES.put(s, "sequence_" + sequenceCounter);
					sequenceCounter++;
					q.addAll(s.nodes());
				}
				case Or or -> {
					NODE_NAMES.put(or, "alternation_" + alternationCounter);
					alternationCounter++;
					q.addAll(or.nodes());
				}
				default -> throw new IllegalArgumentException(String.format("Unknown Node '%s'.", n));
			}
		}
	}

	private static void generateZeroOrOne(
			final Queue<Node> q,
			final IndentedStringBuilder sb,
			final String productionName,
			final ZeroOrOne o,
			final Set<String> tokenNames) {
		sb.append("private ZeroOrOne parse_" + productionName + "() {\n").indent();
		final String actualName = NODE_NAMES.get(o.inner());
		if (o.inner() instanceof NonTerminal && tokenNames.contains(actualName)) {
			sb.append("final Node inner = parseTerminal(TokenType." + actualName + ");\n");
		} else {
			sb.append("final Node inner = parse_" + actualName + "();\n");
			q.add(o.inner());
		}
		sb.append("return new ZeroOrOne(inner);\n").deindent().append("}\n");
	}
}
